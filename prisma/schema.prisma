// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//  provider = "postgresql"
//  url      = env("DATABASE_URL")
// }
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum IdentityProvider {
  DRIPPY
  GOOGLE
  SAML
}

enum UserPermissionRole {
  USER
  ADMIN
  CREATOR
}

model User {
  //  id                     String           @id @default(cuid())
  id                  String           @id @default(auto()) @map("_id") @db.ObjectId
  username            String?
  firstName           String
  lastName            String?
  /// @zod.email()
  email               String
  emailVerified       Boolean?         @default(false)
  bio                 String?
  avatar              String?
  avatarUrl           String?          @default("@/public/user/avatar.jpg")
  timeZone            String           @default("Europe/London")
  weekStart           String           @default("Sunday")
  createdDate         DateTime         @default(now()) @map(name: "created")
  trialEndsAt         DateTime?
  credential          Credential?
  completedOnboarding Boolean          @default(false)
  locale              String?
  timeFormat          Int?             @default(12)
  twoFactorSecret     String?
  twoFactorEnabled    Boolean          @default(false)
  identityProvider    IdentityProvider @default(DRIPPY)
  identityProviderId  String?
  brandColor          String           @default("#292929")
  darkBrandColor      String           @default("#fafafa")
  //  stripeCustomerId       String?          @unique @map(name: "stripe_customer_id")
  //  stripeSubscriptionId   String?          @unique @map(name: "stripe_subscription_id")
  //  stripePriceId          String?          @map(name: "stripe_price_id")
  //  stripeCurrentPeriodEnd DateTime?        @map(name: "stripe_current_period_end")
  slogan              String           @default("Colorful serenity")
  products            Product[]
  Order               Order[]
  Collection          Collection[]
  design              Design[]
  // participate in SEO indexing or not
  allowSEOIndexing    Boolean?         @default(true)

  // receive monthly digest email for teams or not
  receiveMonthlyDigestEmail Boolean? @default(true)

  /// @zod.custom(imports.userMetadata)
  metadata             Json?
  verified             Boolean?           @default(false)
  role                 UserPermissionRole @default(USER)
  disableImpersonation Boolean            @default(false)
  // impersonatedUsers    Impersonations[]        @relation("impersonated_user")
  // impersonatedBy       Impersonations[]        @relation("impersonated_by_user")
  // apiKeys              ApiKey[]
  accounts             Account[]
  sessions             Session[]
  addresses            Address[]
  cartitem             CartItem[]
  // emails               Email[]
  // Feedback             Feedback[]
  // ownedEventTypes      EventType[]             @relation("owner")
  // routingForms         App_RoutingForms_Form[] @relation("routing-form")
  // verifiedNumbers      VerifiedNumber[]

  // Used to lock the user account
  isActive Boolean @default(false)

  @@unique([email])
  @@unique([email, username])
  @@index([username])
  @@index([emailVerified])
  @@index([identityProvider])
  @@index([identityProviderId])
  @@map(name: "users")
}

//Product Type -> Product Category
//Product Category -> Object
//title-> name

model Credential {
  //  id     String  @id @default(cuid())
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  type   String
  key    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @db.ObjectId
}

model Session {
  //  id           String   @id @default(cuid())
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  //  id                String  @id @default(cuid())
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum FileUploadStatus {
  UPLOADING
  PENDING
  PROCESSING
  SUCCESS
  FAILED
}

enum DesignType {
  BLUEPRINT
  DRAWING
  ILLUSTRATION
  PAINTING
  PHOTOGRAPHY
  TEXT
}

enum DesignOrientation {
  LANDSCAPE
  PORTRAIT
}

enum ProductStatus {
  UNDERREVIEW
  ACTIVATED
  DEACTIVATED
  NOTAPPROVED
}

enum ProductCategory {
  METALPOSTER
  PAPERPOSTER
  FRAMEDPRINT
  PHOTOGRAPHICPRINT
  CANVASPRINT
  GALLERYPRINT
  LAPTOPSLEEVE
  MOUSEPAD
  DESKMAT
  CLASSICTSHIRT
  CLASSICMUG
  THROWPILLOW
  SPIRALNOTEBOOK
  COASTER
}

model Design {
  // designId String @id @default(cuid())
  designId    String            @id @default(auto()) @map("_id") @db.ObjectId
  userId      String            @db.ObjectId
  user        User              @relation(fields: [userId], references: [id])
  designType  DesignType
  products    Product[]
  themes      Theme[]
  title       String
  hdUrl       String
  tags        String[]
  colors      ProductColor[]
  orientation DesignOrientation
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Product {
  //  productId         String        @id @default(cuid())
  productId             String                       @id @default(auto()) @map("_id") @db.ObjectId
  designId              String                       @db.ObjectId
  designType            DesignType //Copy from design document, will be used for searching and filtering
  orientation           DesignOrientation //Copy from design document, will be used for searching and filtering
  productCategory       ProductCategory
  variants              Variant[]
  title                 String
  description           String
  price                 Int
  productStatus         ProductStatus
  imageUrl              String
  imageUrlWithMale      String?
  imageUrlWithFemale    String?
  variantImagesUrl      String[]
  variantColorImagesUrl TClassicTshirtColorWithURL[]
  slug                  String
  colors                ProductColor[]
  orderItems            OrderItem[]
  createdAt             DateTime                     @default(now())
  updatedAt             DateTime                     @updatedAt
  userId                String                       @db.ObjectId
  user                  User                         @relation(fields: [userId], references: [id])
  isFeatured            Boolean                      @default(false)
  isDeleted             Boolean                      @default(false)
  cartItems             CartItem[]
  // collectionId       String         @db.ObjectId
  // collection         Collection     @relation(fields: [collectionId], references: [collectionId])
  // category           String    
  themes                Theme[]
  // themes               Theme[]   @relation(fields: [themeIds], references: [themeId])
  design                Design                       @relation(fields: [designId], references: [designId])
  searchTerms           String[]
  tags                  String[]

  @@index([productId, productStatus])
}

model Variant {
  variantId          String              @id @default(auto()) @map("_id") @db.ObjectId
  productCategory    ProductCategory
  paperPosterSize    PaperPosterSize?
  paperPosterFinish  PaperPosterFinish?
  framedPosterFrame  FramedPosterFrame?
  metalPosterSize    MetalPosterSize?
  metalPosterFinish  MetalPosterFinish?
  metalPosterFrame   MetalPosterFrame?
  mousePadSize       MousePadSize?
  mousePadShape      MousePadShape?
  deskMatSize        DeskMatSize?
  laptopSleeveColor  LaptopSleeveColor?
  laptopSleeveSize   LaptopSleeveSize?
  classicTshirtSize  ClassicTshirtSize?
  classicTshirtColor ClassicTshirtColor?
  classicTshirtFront Boolean?
  imagesUrl          String[]
  price              Int
  gstRate            Int
  commissionValue    Int
  inStock            Boolean             @default(true)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  productId String     @db.ObjectId
  product   Product    @relation(fields: [productId], references: [productId])
  cartItems CartItem[]
  isDeleted Boolean    @default(false)
}

model Collection {
  //  collectionId String   @id @default(cuid()) 
  collectionId String   @id @default(auto()) @map("_id") @db.ObjectId
  userId       String?  @db.ObjectId
  title        String
  description  String?  @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id])
  // products     Product[]
}

// model Theme {
//     themeId String               @id @map("_id")
//     title      String
//     slug       String
//     product         Product[]       @relation(fields: [productIds], references: [productId])      
//     productIds      String[]         @db.ObjectId

// }

model MasterPrice {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  basePrice          Int
  gstRate            Int
  totalPrice         Int
  commissionValue    Int
  productCategory    ProductCategory
  paperPosterSize    PaperPosterSize?
  paperPosterFinish  PaperPosterFinish?
  framedPosterFrame  FramedPosterFrame?
  metalPosterSize    MetalPosterSize?
  metalPosterFinish  MetalPosterFinish?
  metalPosterFrame   MetalPosterFrame?
  laptopSleeveSize   LaptopSleeveSize?
  laptopSleeveColor  LaptopSleeveColor?
  mousePadSize       MousePadSize?
  mousePadShape      MousePadShape?
  deskMatSize        DeskMatSize?
  classicTshirtSize  ClassicTshirtSize?
  classicTshirtColor ClassicTshirtColor?
  classicTshirtFront Boolean?
  isDeleted          Boolean             @default(false)
}

model CartItem {
  cartItemId String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [productId])

  variantId String  @db.ObjectId
  variant   Variant @relation(fields: [variantId], references: [variantId])

  quantity  Int
  price     Int
  imageUrl  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  orderId       String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber   Int           @unique
  paymentMethod PaymentMethod

  userId    String? @db.ObjectId
  user      User?   @relation(fields: [userId], references: [id])
  email     String  @default("") //for guest users
  firstName String  @default("") //for guest users
  lastName  String  @default("") //for guest users

  orderStatus         OrderStatus @default(PENDING)
  razorpay_payment_id String      @default("")
  razorpay_order_id   String      @default("")
  razorpay_signature  String      @default("")

  baseAmount     Float
  gstAmount      Float
  shippingAmount Float
  discountAmount Float
  codAmount      Float       @default(0)
  onlinePayDiscount Float       @default(0)
  coupon         String?
  totalAmount    Float
  orderItems     OrderItem[]
  isPaid         Boolean     @default(false)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  address        Address     @relation(fields: [addressId], references: [addressId])
  addressId      String      @db.ObjectId
}

model OrderItem {
  orderItemId String @id @default(auto()) @map("_id") @db.ObjectId

  orderId String @db.ObjectId
  order   Order  @relation(fields: [orderId], references: [orderId])

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [productId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItemStatus  OrderStatus @default(PENDING)
  price            Int
  totalItemPrice   Int
  variantId        String      @db.ObjectId
  quantity         Int
  commissionAmount Int
}

model Address {
  //  addressId   String      @id @default(cuid())
  addressId   String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  user        User        @relation(fields: [userId], references: [id])
  house1      String
  street1     String
  street2     String?
  street3     String?
  city        String?
  statecode   String
  pincode     String
  phoneNo     String      @default("")
  countrycode CountryCode
  orders      Order[]
}


model Email{
  emailId         String @id @default(auto()) @map("_id") @db.ObjectId
  
  type            EmailType

  subject         String
  body            String
  fromEmail       String
  toEmail         String

  // userId          String @db.ObjectId
  // user            User   @relation(fields: [userId], references: [id])
  
  createdAt       DateTime @default(now())
}

enum EmailType {
  NOTFOUND

  USERSIGNUP

  USERORDERFAILED
  USERORDERCONFIRMATION
  USERORDERDELIVERY
  USERORDERCANCELLATION
  USERORDERRETURN

  CREATORORDERCONFIRMATION
  CREATORORDERDELIVERY

  ORDERCONFIRMATION
  ORDERPROCESSING
  ORDERSHIPPED
  ORDERDELIVERED
  ORDERREFUNDISSUED
  ORDERRETURNINITIATED
  ORDERRETURNED
  ORDERCANCELLED

  PRODUCTSTATUSCHANGE
  DESIGNSTATUSCHANGE
}

enum MetalPosterSize {
  XS
  S
  M
  L
  XL
  XXL
}

enum MetalPosterFinish {
  MATTE
  GLOSS
}

enum MetalPosterFrame {
  NONE
  NATURAL
  GRAPHITE
  WHITE
  BLACK
}

enum PaperPosterSize {
  A1
  A2
  A3
  A4
}

enum ClassicTshirtSize {
  S34
  S36
  S38
  S40
  S42
  S44
  S46
  S48
  S50
}

enum ClassicTshirtColor {
  // HEX_000000
  // HEX_321541
  // HEX_F9D168
  HEX_A50303
  HEX_19E4FF
  HEX_151515
  // HEX_6E6E6E
  // HEX_22482E
  HEX_C3C3C3
  HEX_2D314A
  // HEX_1F286A
  HEX_FFFFFF
  // HEX_159512
  // HEX_EF9A31
  // HEX_1C100F
  // HEX_002A2F
  // HEX_3A3E41
  HEX_453E2F
  // HEX_CF8F26
  // HEX_FCFA30
  // HEX_FFD5DB
  HEX_2D0101
  // HEX_7B2F1D
  HEX_E65E00
  // HEX_EBCD8B
  // HEX_BBB1D2
  // HEX_CCF5C9
  // HEX_C2745F
  // HEX_FFDEC6
  // HEX_CC9D93
  // HEX_E29891
  // HEX_C86E4E
  // HEX_BFFCF7
  // HEX_A4CEF8
  // HEX_9D6333
}

type TClassicTshirtColorWithURL {
  sequence Int
  url      String
  color    ClassicTshirtColor
  front    Boolean
}

enum ProductColor {
  MULTICOLOR
  BLACK
  DARKGREY
  WHITE
  GREY
  DARKRED
  RED
  PINK
  LIGHTPINK
  ORANGE
  GOLD
  GREEN
  ARMY
  PURPLE
  YELLOW
  NAVY
  BLUE
  LIGHTBLUE
  CREME
  BROWN
}

enum PaperPosterFinish {
  MATTE
  GLOSS
}

enum FramedPosterFrame {
  NONE
  BLACK
  WHITE
  BW
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNINITIATED
  RETURNCOMPLETED
}

enum MousePadSize {
  S
  M
  L
}

enum MousePadShape {
  RECTANGLE
  CIRCLE
}

enum DeskMatSize {
  S28
  S42
}

enum LaptopSleeveSize {
  S12
  S13
  S14
  S15
  S16
  S17
}

enum LaptopSleeveColor {
  BLUE
  BLACK
  BROWN
  GREY
  PINK
}

enum PaymentMethod {
  RAZORPAY
  STRIPE
  PAYPAL
  PAYTM
  UPI
  PHONEPE
  GOOGLEPAY
  APPLEPAY
  CREDITCARD
  DEBITCARD
  NETBANKING
  COD
  WALLET
  OTHER
}

enum Theme {
  KIDS
  CONTEMPORARY
  MANCAVE
  TEXTART
  PAINTINGS
  ABSTRACT
  FOODKITCHEN
  POPART
  MINIMALISTIC
  VINTAGE
  BLUEPRINT
  CUTE
  INSPIRATIONAL
  BOOKS
  CELEBRITIES
  CARTOONS
  TVSHOWS
  COMICS
  FUNNY
  RETRO
  MUSIC
  MOVIES
  INDIA
  FLORAL
  TRAVEL
  LANDSCAPES
  CITYSCAPES
  NATURE
  ANIMALS
  MAPS
  FASHION
  PLANES
  FANTASY
  ASIAN
  MILITARY
  CARS
  SPACE
  ANIME
  SPORT
  GAMING
}

enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BH
  BS
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  KH
  CM
  CA
  CV
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KP
  KR
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MK
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  SS
  ES
  LK
  SD
  SR
  SJ
  SZ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  US
  UM
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}
